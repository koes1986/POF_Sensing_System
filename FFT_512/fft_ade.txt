



#define LOG_OUT 1 // use the log output function
#define FFT_N 256 // set to 256 point fft
#include <FFT_2.h>

//int __attribute__((used)) fft_input[(260*2)]; // fft input data buffer
void setup() {
  Serial.begin(115200); // use the serial port
  //TIMSK0 = 0; // turn off timer0 for lower jitter
  //ADCSRA = 0xe5; // set the adc to free running mode
  //ADMUX = 0x40; // use adc0
  //DIDR0 = 0x01; // turn off the digital input for adc0

}

void loop() {
  while(1) { // reduces jitter
    cli();  // UDRE interrupt slows this way down on arduino1.0
    for (int i = 0 ; i < 512 ; i += 2) { // save 256 samples
      //while(!(ADCSRA & 0x10)); // wait for adc to be ready
      //ADCSRA = 0xf5; // restart adc
      //byte m = ADCL; // fetch adc data
      //byte j = ADCH;
      //int k = (j << 8) | m; // form into an int
      //k -= 0x0200; // form into a signed int
      //k <<= 6; // form into a 16b signed int
      fft_input[i] = i/2; // put real data into even bins
      fft_input[i+1] = 0; // set odd bins to 0
      //Serial.println(fft_input[0]);
      //fft_input[2]=30000;
      //fft_input[4]=90;
    }
    //for(int i = 512; i < 700; i += 2){
          //Serial.println(fft_input[i]);
    //}
    //Serial.println(fft_input[240]);
    //Serial.println("stoop");
    //fft_window(); // window the data for better frequency response
    //Serial.println(fft_input[100]);
    //fft_reorder(); // reorder the data before doing the fft
    //fft_run(); // process the data in the fft
    //fft_mag_log(); // take the output of the fft
    sei();
    //Serial.write(255); // send a start byte
    //Serial.write(fft_log_out, 128); // send out the data
    Serial.println(fft_input[210]);
    Serial.println(fft_input[255]);
    Serial.println("stopppp");
    //for(int i = 0; i < 512; i += 2){
          //Serial.println(fft_input[i]);
    //}
    
    //delay(1000); 
  }
}